@startuml
title Event Management Sequence Diagram for Employee

actor Employee as "<<Actor>>\nEmployee"

participant ReactApplication as "<<View>>\nReactApplication"
participant EventsPage as "<<View>>\nEventsPage"
participant EventController as "<<Controller>>\nEventController"
participant EventService as "<<Service>>\nEventService"
participant EventEntity as "<<Entity>>\nEventEntity"
participant EventRepository as "<<Repository>>\nEventRepository"
participant Database as "<<Database>>"
participant EventResponseModel as "<<Model>>\nEventResponseModel"

Employee -> ReactApplication : Access Events Page
activate ReactApplication

ReactApplication -> EventsPage : render()
activate EventsPage

EventsPage -> EventController : GET /api/v1/events
activate EventController

EventController -> EventService : getAllEvents()
activate EventService

EventService -> EventRepository : findAll()
activate EventRepository

EventRepository -> Database : SELECT * FROM events
activate Database
Database --> EventRepository : List of events
deactivate Database

EventRepository --> EventService : eventEntities
deactivate EventRepository

EventService -> EventResponseModel : Map entities to response models
activate EventResponseModel
EventResponseModel --> EventService : Response models ready
deactivate EventResponseModel

EventService --> EventController : List of EventResponseModels
deactivate EventService

EventController --> EventsPage : Display events list
deactivate EventController
deactivate EventsPage
deactivate ReactApplication
' Front-End Filtering Step
opt Apply Filters
    EventsPage -> EventsPage : Apply city/country filters (client-side)
end
note right of EventsPage
  Filtering is performed locally
  using Typescript,
  no additional backend calls are made.
end note

opt Add New Event
    Employee -> EventsPage : Fill event form and submit
    EventsPage -> EventController : POST /api/v1/events
    activate EventController

    EventController -> EventService : saveEvent(eventRequestModel)
    activate EventService

    EventService -> EventEntity : Instantiate from request model
    activate EventEntity
    EventEntity --> EventService : Entity created
    deactivate EventEntity

    EventService -> EventRepository : save(eventEntity)
    activate EventRepository
    EventRepository -> Database : INSERT INTO events
    activate Database
    Database --> EventRepository : Success
    deactivate Database
    EventRepository --> EventService : Saved event
    deactivate EventRepository

    EventService -> EventResponseModel : Create response model from entity
    activate EventResponseModel
    EventResponseModel --> EventService : Response ready
    deactivate EventResponseModel

    EventService --> EventController : eventResponseModel
    deactivate EventService
    EventController --> EventsPage : Event added successfully
    deactivate EventController
end

opt Modify Event
    Employee -> EventsPage : Edit event form and submit
    EventsPage -> EventController : PUT /api/v1/events/{eventId}
    activate EventController

    EventController -> EventService : updateEvent(eventId, eventRequestModel)
    activate EventService

    EventService -> EventRepository : Find event by ID
    activate EventRepository
    EventRepository -> Database : SELECT * FROM events WHERE id = eventId
    activate Database
    Database --> EventRepository : Event found
    deactivate Database
    EventRepository --> EventService : eventEntity
    deactivate EventRepository

    EventService -> EventEntity : Update entity with request data
    activate EventEntity
    EventEntity --> EventService : Updated entity
    deactivate EventEntity

    EventService -> EventRepository : save(updatedEventEntity)
    activate EventRepository
    EventRepository -> Database : UPDATE events SET ...
    Database --> EventRepository : Success
    deactivate Database
    EventRepository --> EventService : Updated event
    deactivate EventRepository

    EventService -> EventResponseModel : Create response model from updated entity
    activate EventResponseModel
    EventResponseModel --> EventService : Response ready
    deactivate EventResponseModel

    EventService --> EventController : eventResponseModel
    deactivate EventService
    EventController --> EventsPage : Event updated successfully
    deactivate EventController
end

opt Get Event by ID
    Employee -> EventsPage : Click on event name
    EventsPage -> EventController : GET /api/v1/events/{eventId}
    activate EventController

    EventController -> EventService : getEventByEventId(eventId)
    activate EventService

    EventService -> EventRepository : findEventByEventId(eventId)
    activate EventRepository
    EventRepository -> Database : SELECT * FROM events WHERE id = eventId
    activate Database
    Database --> EventRepository : Event data
    deactivate Database
    EventRepository --> EventService : eventEntity
    deactivate EventRepository

    EventService -> EventResponseModel : Create response model from entity
    activate EventResponseModel
    EventResponseModel --> EventService : Response ready
    deactivate EventResponseModel

    EventService --> EventController : eventResponseModel
    deactivate EventService
    EventController --> EventsPage : Display event details
    deactivate EventController
end

@enduml
