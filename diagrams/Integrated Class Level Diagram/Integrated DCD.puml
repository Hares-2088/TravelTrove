@startuml
title Integrated Class Diagram for TravelTrove System

package "TravelTrove" {
    package "countrysubdomain" {

        package "businesslayer" {
            interface CountryService {
                + getAllCountries() : Flux<CountryResponseModel>
                + getCountryById(countryId: String) : Mono<CountryResponseModel>
                + addCountry(country: Country) : Mono<CountryResponseModel>
                + updateCountry(countryId: String, countryRequestModel: CountryRequestModel) : Mono<CountryResponseModel>
                + deleteCountry(countryId: String) : Mono<Void>
            }

            class CountryServiceImpl {
                - countryRepository: CountryRepository
                + getAllCountries() : Flux<CountryResponseModel>
                + getCountryById(countryId: String) : Mono<CountryResponseModel>
                + addCountry(country: Country) : Mono<CountryResponseModel>
                + updateCountry(countryId: String, countryRequestModel: CountryRequestModel) : Mono<CountryResponseModel>
                + deleteCountry(countryId: String) : Mono<Void>
            }
        }

        package "dataaccesslayer" {
            class Country {
                - id: String
                - countryId: String
                - name: String
                - image: String
            }

            interface CountryRepository extends ReactiveMongoRepository {
                + findCountryByCountryId(countryId: String) : Mono<Country>
            }
        }

        package "presentationlayer" {
            class CountryRequestModel {
                - name: String
                - image: String
            }

            class CountryResponseModel {
                - countryId: String
                - name: String
                - image: String
            }

            class CountryController {
                - countryService: CountryService
                + getAllCountries() : Flux<CountryResponseModel>
                + getCountryById(countryId: String) : Mono<ResponseEntity<CountryResponseModel>>
                + addCountry(countryRequestModel: CountryRequestModel) : Mono<CountryResponseModel>
                + updateCountry(countryId: String, countryRequestModel: CountryRequestModel) : Mono<ResponseEntity<CountryResponseModel>>
                + deleteCountry(countryId: String) : Mono<Void>
            }
        }

        package "utils" {
            class EntityModelUtil {
                + toCountryResponseModel(country: Country) : CountryResponseModel
                + toCountryEntity(countryRequestModel: CountryRequestModel) : Country
                + generateUUIDString() : String
            }
        }

        CountryServiceImpl -down-|> CountryService : implements
        CountryServiceImpl -down-> CountryRepository : uses
        CountryController -down-> CountryService : uses
        CountryController -down-> CountryRequestModel : uses
        CountryController -down-> CountryResponseModel : uses
        CountryServiceImpl -down-> Country : manipulates
        CountryServiceImpl -down-> CountryRequestModel : uses
        CountryServiceImpl -down-> CountryResponseModel : returns
        EntityModelUtil -up-^ Country : converts
        EntityModelUtil -up-^ CountryRequestModel : maps
        EntityModelUtil -up-^ CountryResponseModel : maps
    }

    package "citysubdomain" {

        package "businesslayer" {
            interface CityService {
                + addCity(cityRequestModel: CityRequestModel) : Mono<CityResponseModel>
                + getCityById(cityId: String) : Mono<CityResponseModel>
                + getAllCities() : Flux<CityResponseModel>
                + updateCity(cityId: String, cityRequestModel: CityRequestModel) : Mono<CityResponseModel>
                + deleteCityByCityId(cityId: String) : Mono<Void>
            }

            class CityServiceImpl {
                - cityRepository: CityRepository
                + addCity(cityRequestModel: CityRequestModel) : Mono<CityResponseModel>
                + getCityById(cityId: String) : Mono<CityResponseModel>
                + getAllCities() : Flux<CityResponseModel>
                + updateCity(cityId: String, cityRequestModel: CityRequestModel) : Mono<CityResponseModel>
                + deleteCityByCityId(cityId: String) : Mono<Void>
            }
        }

        package "dataaccesslayer" {
            class City {
                - id: String
                - cityId: String
                - name: String
                - countryId: String
            }

            interface CityRepository extends ReactiveMongoRepository {
                + findCityByCityId(cityId: String) : Mono<City>
                + findCityByCityIdAndCountryId(cityId: String, countryId: String) : Mono<City>
                + findAllCitiesByCountryId(countryId: String) : Flux<City>
            }
        }

        package "presentationlayer" {
            class CityRequestModel {
                - name: String
                - countryId: String
            }

            class CityResponseModel {
                - cityId: String
                - name: String
                - countryId: String
            }

            class CityController {
                - cityService: CityService
                + addCity(cityRequestModel: CityRequestModel) : Mono<CityResponseModel>
                + getCityById(cityId: String) : Mono<ResponseEntity<CityResponseModel>>
                + getAllCities() : Flux<CityResponseModel>
                + updateCity(cityId: String, cityRequestModel: CityRequestModel) : Mono<ResponseEntity<CityResponseModel>>
                + deleteCityByCityId(cityId: String) : Mono<Void>
            }
        }

        package "utils" {
            class EntityModelUtil {
                + toCityResponseModel(city: City) : CityResponseModel
                + toCityEntity(cityRequestModel: CityRequestModel) : City
                + generateUUIDString() : String
            }
        }

        CityServiceImpl -down-|> CityService : implements
        CityServiceImpl -down-> CityRepository : uses
        CityController -down-> CityService : uses
        CityController -down-> CityRequestModel : uses
        CityController -down-> CityResponseModel : uses
        CityServiceImpl -down-> City : manipulates
        CityServiceImpl -down-> CityRequestModel : uses
        CityServiceImpl -down-> CityResponseModel : returns
        EntityModelUtil -up-^ City : converts
        EntityModelUtil -up-^ CityRequestModel : maps
        EntityModelUtil -up-^ CityResponseModel : maps
    }

    package "toureventsubdomain" {

        package "businesslayer" {
            interface TourEventService {
                + getAllTourEvents() : Flux<TourEventResponseModel>
                + getTourEventsByTourId(tourId: String) : Flux<TourEventResponseModel>
                + getTourEventByTourEventId(tourEventId: String) : Mono<TourEventResponseModel>
                + addTourEvent(tourEvent: TourEvent) : Mono<TourEventResponseModel>
                + updateTourEvent(tourEventId: String, request: TourEventRequestModel) : Mono<TourEventResponseModel>
                + deleteTourEvent(tourEventId: String) : Mono<Void>
            }

            class TourEventServiceImpl {
                - tourEventRepository: TourEventRepository
                + getAllTourEvents() : Flux<TourEventResponseModel>
                + getTourEventsByTourId(tourId: String) : Flux<TourEventResponseModel>
                + getTourEventByTourEventId(tourEventId: String) : Mono<TourEventResponseModel>
                + addTourEvent(tourEvent: TourEvent) : Mono<TourEventResponseModel>
                + updateTourEvent(tourEventId: String, request: TourEventRequestModel) : Mono<TourEventResponseModel>
                + deleteTourEvent(tourEventId: String) : Mono<Void>
            }
        }

        package "datalayer" {
            class TourEvent {
                - id: String
                - tourEventId: String
                - seq: Integer
                - seqDesc: String
                - tourId: String
                - eventId: String
            }

            interface TourEventRepository extends ReactiveMongoRepository {
                + findAllByTourId(tourId: String) : Flux<TourEvent>
                + findByTourEventId(tourEventId: String) : Mono<TourEvent>
                + deleteByTourEventId(tourEventId: String) : Mono<Void>
            }
        }

        package "presentationlayer" {
            class TourEventRequestModel {
                - seq: Integer
                - seqDesc: String
                - tourId: String
                - eventId: String
            }

            class TourEventResponseModel {
                - tourEventId: String
                - seq: Integer
                - seqDesc: String
                - tourId: String
                - eventId: String
            }

            class TourEventController {
                - tourEventService: TourEventService
                - tourEventRepository: TourEventRepository
                + getAllTourEvents() : Flux<TourEventResponseModel>
                + getTourEventsByTourId(tourId: String) : Flux<TourEventResponseModel>
                + getTourEventByTourEventId(tourEventId: String) : Mono<ResponseEntity<TourEventResponseModel>>
                + addTourEvent(request: TourEventRequestModel) : Mono<TourEventResponseModel>
                + updateTourEvent(tourEventId: String, request: TourEventRequestModel) : Mono<ResponseEntity<TourEventResponseModel>>
                + deleteTourEvent(tourEventId: String) : Mono<Void>
            }
        }

        package "utils" {
            class EventEntityModel {
                + toTourEventResponseModel(tourEvent: TourEvent) : TourEventResponseModel
                + toTourEventEntity(request: TourEventRequestModel) : TourEvent
                + generateUUIDString() : String
            }
        }

        TourEventServiceImpl -down-|> TourEventService : implements
        TourEventServiceImpl -down-> TourEventRepository : uses
        TourEventController -down-> TourEventService : uses
        TourEventController -down-> TourEventRepository : uses
        TourEventController -down-> TourEventRequestModel : uses
        TourEventController -down-> TourEventResponseModel : returns
        EventEntityModel -up-^ TourEvent : maps
    }

    package "eventsubdomain" {

        package "businesslayer" {
            interface EventService {
                + getEventByEventId(eventId: String) : Mono<EventResponseModel>
                + getEvents(cityId: String, countryId: String) : Flux<EventResponseModel>
                + createEvent(event: Mono<EventRequestModel>) : Mono<EventResponseModel>
                + updateEvent(eventId: String, event: Mono<EventRequestModel>) : Mono<EventResponseModel>
                + deleteEvent(eventId: String) : Mono<EventResponseModel>
            }

            class EventServiceImpl {
                - eventRepository: EventRepository
                + getEventByEventId(eventId: String) : Mono<EventResponseModel>
                + getEvents(cityId: String, countryId: String) : Flux<EventResponseModel>
                + createEvent(event: Mono<EventRequestModel>) : Mono<EventResponseModel>
                + updateEvent(eventId: String, event: Mono<EventRequestModel>) : Mono<EventResponseModel>
                + deleteEvent(eventId: String) : Mono<EventResponseModel>
            }
        }

        package "dataaccesslayer" {
            class Event {
                + id: String
                + eventId: String
                + cityId: String
                + countryId: String
                + name: String
                + description: String
                + image: String
            }

            interface EventRepository extends ReactiveMongoRepository {
                + findEventByEventId(eventId: String) : Mono<Event>
                + findAllByCityId(cityId: String) : Flux<Event>
                + findByCountryId(countryId: String) : Flux<Event>
            }
        }

        package "presentationlayer" {
            class EventRequestModel {
                + cityId: String
                + countryId: String
                + name: String
                + description: String
                + image: String
            }

            class EventResponseModel {
                + eventId: String
                + cityId: String
                + countryId: String
                + name: String
                + description: String
                + image: String
            }

            class EventController {
                - eventService: EventService
                + getEvents(cityId: String, countryId: String) : Flux<EventResponseModel>
                + getEventByEventId(eventId: String) : Mono<ResponseEntity<EventResponseModel>>
                + createEvent(event: Mono<EventRequestModel>) : Mono<ResponseEntity<EventResponseModel>>
                + updateEvent(eventId: String, event: Mono<EventRequestModel>) : Mono<ResponseEntity<EventResponseModel>>
                + deleteEvent(eventId: String) : Mono<ResponseEntity<EventResponseModel>>
            }
        }

        package "utils" {
            class EventEntityModel {
                + toEventResponseModel(event: Event) : EventResponseModel
                + toEventEntity(eventRequestModel: EventRequestModel) : Event
                + generateUUIDString() : String
            }
        }

        EventServiceImpl -down-|> EventService : implements
        EventServiceImpl -down-> EventRepository : uses
        EventController -down-> EventService : uses
        EventController -down-> EventRequestModel : uses
        EventController -down-> EventResponseModel : uses
        EventServiceImpl -down-> Event : manipulates
        EventServiceImpl -down-> EventRequestModel : uses
        EventServiceImpl -down-> EventResponseModel : returns
        EventEntityModel -up-^ Event : converts
        EventEntityModel -up-^ EventRequestModel : maps
        EventEntityModel -up-^ EventResponseModel : maps
    }

    package "toursubdomain" {

        package "businesslayer" {
            interface TourService {
                + getTours() : Flux<TourResponseModel>
                + getTourByTourId(tourId: String) : Mono<TourResponseModel>
                + addTour(tour: Tour) : Mono<TourResponseModel>
                + updateTour(tourId: String, tourRequestModel: TourRequestModel) : Mono<TourResponseModel>
                + deleteTourByTourId(tourId: String) : Mono<Void>
            }

            class TourServiceImpl {
                - tourRepository: TourRepository
                + getTours() : Flux<TourResponseModel>
                + getTourByTourId(tourId: String) : Mono<TourResponseModel>
                + addTour(tour: Tour) : Mono<TourResponseModel>
                + updateTour(tourId: String, tourRequestModel: TourRequestModel) : Mono<TourResponseModel>
                + deleteTourByTourId(tourId: String) : Mono<Void>
            }
        }

        package "dataaccesslayer" {
            class Tour {
                + id: String
                + tourId: String
                + name: String
                + description: String
                + tourEvents: List<TourEvents>
            }

            class TourEvents {
                + id: String
                + seq: int
                + seqDesc: String
                + tourId: String
                + events: String
                + toursEventId: String
            }

            interface TourRepository extends ReactiveMongoRepository {
                + findTourByTourId(tourId: String) : Mono<Tour>
                + findAll() : Flux<Tour>
            }
        }

        package "presentationlayer" {
            class TourRequestModel {
                + name: String
                + description: String
            }

            class TourResponseModel {
                + tourId: String
                + name: String
                + description: String
            }

            class TourController {
                - tourService: TourService
                + getAllTours() : Flux<TourResponseModel>
                + getTourByTourId(tourId: String) : Mono<ResponseEntity<TourResponseModel>>
                + addTour(tourRequestModel: TourRequestModel) : Mono<TourResponseModel>
                + updateTour(tourId: String, tourRequestModel: TourRequestModel) : Mono<ResponseEntity<TourResponseModel>>
                + deleteTourByTourId(tourId: String) : Mono<Void>
            }
        }

        package "utils" {
            class EntityModelUtil {
                + toTourResponseModel(tour: Tour) : TourResponseModel
                + toTourEntity(tourRequestModel: TourRequestModel) : Tour
                + generateUUIDString() : String
            }
        }

        TourServiceImpl -down-|> TourService : implements
        TourServiceImpl -down-> TourRepository : uses
        TourController -down-> TourService : uses
        TourController -down-> TourRequestModel : uses
        TourController -down-> TourResponseModel : uses
        TourServiceImpl -down-> Tour : manipulates
        TourServiceImpl -down-> TourRequestModel : uses
        TourServiceImpl -down-> TourResponseModel : returns
        EntityModelUtil -up-^ Tour : converts
        EntityModelUtil -up-^ TourRequestModel : maps
        EntityModelUtil -up-^ TourResponseModel : maps
        Tour -down-> TourEvents : contains
    }

}

@enduml