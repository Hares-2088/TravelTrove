@startuml
title Standalone Class Diagram for Bookings

package "bookingsubdomain" {



    package "businesslayer" {
        interface BookingService {
            + getAllBookings() : Flux<BookingResponseModel>
            + getBookingById(bookingId: String) : Mono<BookingResponseModel>
            + addBooking(booking: BookingRequestModel) : Mono<BookingResponseModel>
            + updateBooking(bookingId: String, bookingRequestModel: BookingRequestModel) : Mono<BookingResponseModel>
            + deleteBooking(bookingId: String) : Mono<Void>
        }

        class BookingServiceImpl {
            - bookingRepository: BookingRepository
            + getAllBookings() : Flux<BookingResponseModel>
            + getBookingById(bookingId: String) : Mono<BookingResponseModel>
            + addBooking(booking: BookingRequestModel) : Mono<BookingResponseModel>
            + updateBooking(bookingId: String, bookingRequestModel: BookingRequestModel) : Mono<BookingResponseModel>
            + deleteBooking(bookingId: String) : Mono<Void>
        }
    }

    package "dataaccesslayer" {
        class Booking {
            + _id: ObjectId
            + bookingId: String
            + userId: String
            + packageId: String
            + refundId: String
            + bookingDate: DateTime
            + totalAmount: Decimal
            + status: String
        }

        interface BookingRepository extends ReactiveMongoRepository {
            + findBookingByBookingId(bookingId: String) : Mono<Booking>
            + findAll() : Flux<Booking>
        }
    }

    package "presentationlayer" {
        class BookingRequestModel {
            + userId: String
            + packageId: String
            + refundId: String
            + bookingDate: DateTime
            + totalAmount: Decimal
            + status: String
        }

        class BookingResponseModel {
            + bookingId: String
            + userId: String
            + packageId: String
            + refundId: String
            + bookingDate: DateTime
            + totalAmount: Decimal
            + status: String
        }

        class BookingController {
            - bookingService: BookingService
            + getAllBookings() : Flux<BookingResponseModel>
            + getBookingById(bookingId: String) : Mono<ResponseEntity<BookingResponseModel>>
            + addBooking(bookingRequestModel: BookingRequestModel) : Mono<BookingResponseModel>
            + updateBooking(bookingId: String, bookingRequestModel: BookingRequestModel) : Mono<ResponseEntity<BookingResponseModel>>
            + deleteBooking(bookingId: String) : Mono<Void>
        }
    }

    package "utils" {
        class EntityModelUtil {
            + toBookingResponseModel(booking: Booking) : BookingResponseModel
            + toBookingEntity(bookingRequestModel: BookingRequestModel) : Booking
            + generateUUIDString() : String
        }
    }

    BookingServiceImpl -down-|> BookingService : implements
    BookingServiceImpl -down-> BookingRepository : uses
    BookingController -down-> BookingService : uses
    BookingController -down-> BookingRequestModel : uses
    BookingController -down-> BookingResponseModel : uses
    BookingServiceImpl -down-> Booking : manipulates
    BookingServiceImpl -down-> BookingRequestModel : uses
    BookingServiceImpl -down-> BookingResponseModel : returns
    EntityModelUtil -up-^ Booking : converts
    EntityModelUtil -up-^ BookingRequestModel : maps
    EntityModelUtil -up-^ BookingResponseModel : maps
}

@enduml
