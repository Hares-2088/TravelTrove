@startuml
skinparam class {
    BackgroundColor #f7f4eb
    BorderColor Black
    ArrowColor Black
}
skinparam dpi 300

title Full 3-Layer Architecture: Tour Management System

' Presentation Layer
package "Presentation Layer" <<Rectangle>> #LightYellow {
    class TourPageController {
        + displayTours(): void
        + filterTours(criteria: FilterCriteria): void
        + viewTourDetails(tourId: String): void
    }

    class TourDetailsPageController {
        + displayTourDetails(tourId: String): void
    }

    class TourListView {
        + render(tours: List<TourDTO>): void
    }

    class TourDetailsView {
        + render(details: TourDetailsDTO): void
    }

    TourPageController --> TourListView : "renders"
    TourDetailsPageController --> TourDetailsView : "renders"
}

' Business Layer
package "Business Layer" <<Rectangle>> #Lavender {
    class TourService {
        + getTours(criteria: FilterCriteria): List<TourDTO>
        + getTourDetails(tourId: String): TourDetailsDTO
    }

    class FilterCriteria {
        + destination: String
        + priceRange: Double[]
        + dateRange: LocalDate[]
    }

    TourPageController --> TourService : "uses"
    TourDetailsPageController --> TourService : "uses"
}

' Data Access Layer
package "Data Access Layer" <<Rectangle>> #LightCyan {
    class Tour {
        + tourId: UUID
        + name: String
        + description: String
    }

    class Package {
        + packageId: UUID
        + name: String
        + description: String
        + startDate: LocalDate
        + endDate: LocalDate
        + priceForOne: Double
        + priceForTwo: Double
        + priceForThree: Double
        + totalSeats: Integer
        + availableSeats: Integer
        + airportId: UUID
        + tourId: UUID
    }

    class Country {
        + countryId: UUID
        + name: String
        + imagePath: String
    }

    class City {
        + cityId: UUID
        + name: String
        + countryId: UUID
    }

    class Hotel {
        + hotelId: UUID
        + name: String
        + cityId: UUID
        + url: String
    }

    class Event {
        + eventId: UUID
        + title: String
        + description: String
        + cityId: UUID
    }

    class EventImage {
        + eventId: UUID
        + seq: Integer
        + imagePath: String
        + description: String
    }

    class Review {
        + reviewId: UUID
        + reviewerName: String
        + rating: Integer
        + review: String
        + date: LocalDateTime
        + bookingId: UUID
    }

    class Booking {
        + bookingId: UUID
        + userId: UUID
        + packageId: UUID
        + totalPrice: Double
        + status: BookingStatus
        + bookingDate: LocalDate
    }

    enum BookingStatus {
        PAYMENT_PENDING,
        PAYMENT_ATTEMPT2_PENDING,
        PAYMENT_ATTEMPT3_PENDING,
        BOOKING_FAILED,
        PAYMENT_SUCCESS,
        BOOKING_CONFIRMED,
        BOOKING_FINALIZED,
        BOOKING_EXPIRED,
        BOOKING_CANCELLED,
        REFUNDED
    }

    class Traveler {
        + travelerId: UUID
        + seq: Integer
        + firstName: String
        + lastName: String
        + addrLine1: String
        + addrLine2: String
        + city: String
        + state: String
        + countryId: UUID
    }

    class BookingTraveler {
        + bookingId: UUID
        + travelerId: UUID
    }

    class TourEvent {
        + tourId: UUID
        + seq: String
        + seqDesc: String
        + eventId: UUID
        + hotelId: UUID
    }

    class Airport {
        + airportId: UUID
        + name: String
        + cityId: UUID
    }

    class TourRepository {
        + findTours(criteria: FilterCriteria): List<Tour>
        + findTourDetails(tourId: String): Tour
    }

    TourService --> TourRepository : "uses"
    TourRepository --> Tour : "queries"
    TourRepository --> City : "queries"
    TourRepository --> Event : "queries"
    TourRepository --> Review : "queries"
    TourRepository --> Booking : "queries"
    TourRepository --> TourEvent : "queries"
    TourRepository --> Airport : "queries"
    TourRepository --> Package : "queries"
    TourRepository --> Country : "queries"
    TourRepository --> Hotel : "queries"
    TourRepository --> EventImage : "queries"
    TourRepository --> BookingTraveler : "queries"
    TourRepository --> Traveler : "queries"
    Booking --> BookingStatus : "has"
}

' Data Transfer Objects
package "Data Transfer Objects (DTOs)" <<Rectangle>> #White {
    class TourDTO {
        + name: String
        + startDate: LocalDate
        + endDate: LocalDate
        + availability: Boolean
        + spotsAvailable: Integer
    }

    class TourDetailsDTO {
        + name: String
        + overallDesc: String
        + cities: List<CityDTO>
        + itineraries: List<String>
        + reviews: List<ReviewDTO>
    }

    class CityDTO {
        + name: String
        + description: String
        + startDate: LocalDate
        + hotel: String
    }

    class ReviewDTO {
        + reviewerName: String
        + rating: Integer
        + comment: String
        + date: LocalDate
    }

    TourService --> TourDTO
    TourService --> TourDetailsDTO
    TourDetailsDTO --> CityDTO
    TourDetailsDTO --> ReviewDTO
}

@enduml
