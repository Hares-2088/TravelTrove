@startuml
title Booking Sequence Diagram for Customer

actor Customer
participant ReactApplication
participant PackageDetailsPage
participant PackageBookingPage
participant MyBookingsPage
participant BookingController
participant BookingService
participant BookingEntity
participant BookingRepository
participant PackageRepository
participant Database
participant BookingResponseModel

Customer -> ReactApplication : Access Package Page
activate ReactApplication

ReactApplication -> PackageDetailsPage : render()
deactivate ReactApplication
activate PackageDetailsPage
PackageDetailsPage --> Customer : Display placeholder for bookings

opt Book a Package
    Customer -> PackageBookingPage : Request to book package
    activate PackageBookingPage

    PackageBookingPage -> BookingController : POST /api/v1/bookings
    activate BookingController

    BookingController -> BookingService : bookPackage()
    activate BookingService

    BookingService -> BookingEntity : Map request to entity
    activate BookingEntity

    BookingEntity -> Database : INSERT INTO bookings
    activate Database

    Database --> BookingEntity : Booking entity created
    deactivate Database

    BookingEntity --> BookingService : Booking entity
    deactivate BookingEntity

    BookingService -> BookingRepository : save(bookingEntity)
    activate BookingRepository

    BookingRepository -> Database : INSERT INTO bookings
    activate Database

    Database --> BookingRepository : Booking entity saved
    deactivate Database

    BookingRepository --> BookingService : Booking entity saved
    deactivate BookingRepository

    BookingService -> BookingResponseModel : Map entity to response model
    activate BookingResponseModel

    BookingResponseModel --> BookingService : Response model ready
    deactivate BookingResponseModel

    BookingService --> PackageRepository : decreaseAvailableSeats()
    activate PackageRepository

    PackageRepository -> Database : UPDATE packages SET available_seats = available_seats - 1
    activate Database

    Database --> PackageRepository : Available seats decreased
    deactivate Database

    PackageRepository --> BookingService : Available seats decreased
    deactivate PackageRepository

    BookingService --> BookingController : Response model
    deactivate BookingService

    BookingController --> PackageBookingPage : Response with booking details
    deactivate BookingController

    PackageBookingPage --> Customer : Display booking details
    deactivate PackageBookingPage


end

deactivate PackageDetailsPage
Customer -> ReactApplication : Access My Bookings Page

activate ReactApplication
ReactApplication -> MyBookingsPage : render()
activate MyBookingsPage
deactivate ReactApplication

MyBookingsPage --> Customer : Display placeholder for bookings

opt View Past and Current Bookings
    Customer -> MyBookingsPage : Request my bookings
    MyBookingsPage -> BookingController : GET /api/v1/bookings/customer/{customerId}
    activate BookingController

    BookingController -> BookingService : getBookingsByCustomerId(customerId)
    activate BookingService

    BookingService -> BookingRepository : findAllByCustomerId(customerId)
    activate BookingRepository

    BookingRepository -> Database : SELECT * FROM bookings WHERE customer_id = customerId
    activate Database
    Database --> BookingRepository : List of customer's bookings
    deactivate Database

    BookingRepository --> BookingService : List of booking entities
    deactivate BookingRepository

    BookingService -> BookingResponseModel : Map entities to response models
    activate BookingResponseModel
    BookingResponseModel --> BookingService : Response models ready
    deactivate BookingResponseModel

    BookingService --> BookingController : List of BookingResponseModels
    deactivate BookingService

    BookingController --> MyBookingsPage : Response with customer's bookings
    deactivate BookingController

    MyBookingsPage --> Customer : Display past and current bookings
end

@enduml
