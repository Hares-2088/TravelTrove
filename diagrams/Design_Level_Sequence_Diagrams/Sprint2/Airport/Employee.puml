@startuml
title Airport Management Sequence Diagram for Employee

actor Employee as "<<Actor>>\nEmployee"

participant ReactApplication as "<<View>>\nReactApplication"
participant AirportsPage as "<<View>>\nAirportsPage"
participant AirportController as "<<Controller>>\nAirportController"
participant AirportService as "<<Service>>\nAirportService"
participant AirportEntity as "<<Entity>>\nAirportEntity"
participant AirportRepository as "<<Repository>>\nAirportRepository"
participant Database as "<<Database>>"
participant AirportResponseModel as "<<Model>>\nAirportResponseModel"

Employee -> ReactApplication : Access Airports Page
activate ReactApplication

ReactApplication -> AirportsPage : render()
activate AirportsPage
deactivate ReactApplication

AirportsPage -> AirportController : GET /api/v1/airports
activate AirportController

AirportController -> AirportService : getAllAirports()
activate AirportService

AirportService -> AirportRepository : findAll()
activate AirportRepository

AirportRepository -> Database : SELECT * FROM airports
activate Database
Database --> AirportRepository : List of airports
deactivate Database

AirportRepository --> AirportService : List of airport entities
deactivate AirportRepository

AirportService -> AirportResponseModel : Map entities to response models
activate AirportResponseModel
AirportResponseModel --> AirportService : Response models ready
deactivate AirportResponseModel

AirportService --> AirportController : List of AirportResponseModels
deactivate AirportService

AirportController --> AirportsPage : Display airports list
deactivate AirportController

AirportsPage --> Employee : Display airports

opt Update Airport
    Employee -> AirportsPage : Edit airport form and submit
    AirportsPage -> AirportController : PUT /api/v1/airports/{airportId}
    activate AirportController

    AirportController -> AirportService : updateAirport(airportId, requestModel)
    activate AirportService

    AirportService -> AirportRepository : findById(airportId)
    activate AirportRepository
    AirportRepository -> Database : SELECT * FROM airports WHERE id = airportId
    activate Database
    Database --> AirportRepository : Found airport
    deactivate Database
    AirportRepository --> AirportService : Airport entity
    deactivate AirportRepository

    AirportService -> AirportEntity : Update fields
    activate AirportEntity
    AirportEntity --> AirportService : Updated entity
    deactivate AirportEntity

    AirportService -> AirportRepository : save(updatedEntity)
    activate AirportRepository
    AirportRepository -> Database : UPDATE airports SET ...
    Database --> AirportRepository : Success
    deactivate Database
    AirportRepository --> AirportService : Updated airport
    deactivate AirportRepository

    AirportService -> AirportResponseModel : Map updated entity to response model
    activate AirportResponseModel
    AirportResponseModel --> AirportService : Response ready
    deactivate AirportResponseModel

    AirportService --> AirportController : AirportResponseModel
    deactivate AirportService

    AirportController --> AirportsPage : Airport updated successfully
    deactivate AirportController
end

@enduml
