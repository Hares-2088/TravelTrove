@startuml
title Tour Package Management Sequence Diagram for Admin

actor Admin as "<<Actor>>\nAdmin"

participant ReactApplication as "<<View>>\nReactApplication"
participant TourPackagesPage as "<<View>>\nTourPackagesPage"
participant TourPackageController as "<<Controller>>\nTourPackageController"
participant TourPackageService as "<<Service>>\nTourPackageService"
participant TourPackageEntity as "<<Entity>>\nTourPackageEntity"
participant TourPackageRepository as "<<Repository>>\nTourPackageRepository"
participant Database as "<<Database>>"
participant TourPackageResponseModel as "<<Model>>\nTourPackageResponseModel"

Admin -> ReactApplication : Access Tour Packages Page
activate ReactApplication

ReactApplication -> TourPackagesPage : render()
activate TourPackagesPage
deactivate ReactApplication

TourPackagesPage -> TourPackageController : GET /api/v1/tour-packages
activate TourPackageController

TourPackageController -> TourPackageService : getAllTourPackages()
activate TourPackageService

TourPackageService -> TourPackageRepository : findAll()
activate TourPackageRepository

TourPackageRepository -> Database : SELECT * FROM tour_packages
activate Database
Database --> TourPackageRepository : List of packages
deactivate Database

TourPackageRepository --> TourPackageService : List of package entities
deactivate TourPackageRepository

TourPackageService -> TourPackageResponseModel : Map entities to response models
activate TourPackageResponseModel
TourPackageResponseModel --> TourPackageService : Response models ready
deactivate TourPackageResponseModel

TourPackageService --> TourPackageController : List of TourPackageResponseModels
deactivate TourPackageService

TourPackageController --> TourPackagesPage : Display packages list
deactivate TourPackageController

TourPackagesPage --> Admin : List of packages displayed

opt Add New Tour Package
    Admin -> TourPackagesPage : Fill tour package form and submit
    TourPackagesPage -> TourPackageController : POST /api/v1/tour-packages
    activate TourPackageController

    TourPackageController -> TourPackageService : saveTourPackage(tourPackageRequestModel)
    activate TourPackageService

    TourPackageService -> TourPackageEntity : Instantiate entity from request model
    activate TourPackageEntity
    TourPackageEntity --> TourPackageService : Entity created
    deactivate TourPackageEntity

    TourPackageService -> TourPackageRepository : save(tourPackageEntity)
    activate TourPackageRepository
    TourPackageRepository -> Database : INSERT INTO tour_packages
    activate Database
    Database --> TourPackageRepository : Success
    deactivate Database
    TourPackageRepository --> TourPackageService : Saved package entity
    deactivate TourPackageRepository

    TourPackageService -> TourPackageResponseModel : Map saved entity to response model
    activate TourPackageResponseModel
    TourPackageResponseModel --> TourPackageService : Response ready
    deactivate TourPackageResponseModel

    TourPackageService --> TourPackageController : TourPackageResponseModel
    deactivate TourPackageService

    TourPackageController --> TourPackagesPage : Success message
    deactivate TourPackageController

    TourPackagesPage --> Admin : Tour package added successfully
end

opt Update Tour Package
    Admin -> TourPackagesPage : Edit tour package form and submit
    TourPackagesPage -> TourPackageController : PUT /api/v1/tour-packages/{packageId}
    activate TourPackageController

    TourPackageController -> TourPackageService : updateTourPackage(packageId, tourPackageRequestModel)
    activate TourPackageService

    TourPackageService -> TourPackageRepository : Find package by ID
    activate TourPackageRepository
    TourPackageRepository -> Database : SELECT * FROM tour_packages WHERE id = packageId
    activate Database
    Database --> TourPackageRepository : Package data
    deactivate Database
    TourPackageRepository --> TourPackageService : Package entity
    deactivate TourPackageRepository

    TourPackageService -> TourPackageEntity : Update entity with request data
    activate TourPackageEntity
    TourPackageEntity --> TourPackageService : Updated entity
    deactivate TourPackageEntity

    TourPackageService -> TourPackageRepository : save(updatedTourPackageEntity)
    activate TourPackageRepository
    TourPackageRepository -> Database : UPDATE tour_packages SET ...
    Database --> TourPackageRepository : Success
    deactivate Database
    TourPackageRepository --> TourPackageService : Updated package entity
    deactivate TourPackageRepository

    TourPackageService -> TourPackageResponseModel : Map updated entity to response model
    activate TourPackageResponseModel
    TourPackageResponseModel --> TourPackageService : Response ready
    deactivate TourPackageResponseModel

    TourPackageService --> TourPackageController : TourPackageResponseModel
    deactivate TourPackageService

    TourPackageController --> TourPackagesPage : Success message
    deactivate TourPackageController

    TourPackagesPage --> Admin : Tour package updated successfully
end

opt Delete Tour Package
    Admin -> TourPackagesPage : Select tour package to delete
    TourPackagesPage -> TourPackageController : DELETE /api/v1/tour-packages/{packageId}
    activate TourPackageController

    TourPackageController -> TourPackageService : deleteTourPackage(packageId)
    activate TourPackageService

    TourPackageService -> TourPackageRepository : deleteById(packageId)
    activate TourPackageRepository
    TourPackageRepository -> Database : DELETE FROM tour_packages WHERE id = packageId
    Database --> TourPackageRepository : Success
    deactivate Database
    TourPackageRepository --> TourPackageService : Deletion complete
    deactivate TourPackageRepository

    TourPackageService --> TourPackageController : Deletion confirmation
    deactivate TourPackageService

    TourPackageController --> TourPackagesPage : Success message
    deactivate TourPackageController

    TourPackagesPage --> Admin : Tour package deleted successfully
end

opt Get Tour Package by ID
    Admin -> TourPackagesPage : Click on tour package name
    TourPackagesPage -> TourPackageController : GET /api/v1/tour-packages/{packageId}
    activate TourPackageController

    TourPackageController -> TourPackageService : getTourPackageById(packageId)
    activate TourPackageService

    TourPackageService -> TourPackageRepository : findById(packageId)
    activate TourPackageRepository
    TourPackageRepository -> Database : SELECT * FROM tour_packages WHERE id = packageId
    activate Database
    Database --> TourPackageRepository : Package data
    deactivate Database
    TourPackageRepository --> TourPackageService : Package entity
    deactivate TourPackageRepository

    TourPackageService -> TourPackageResponseModel : Map entity to response model
    activate TourPackageResponseModel
    TourPackageResponseModel --> TourPackageService : Response ready
    deactivate TourPackageResponseModel

    TourPackageService --> TourPackageController : TourPackageResponseModel
    deactivate TourPackageService

    TourPackageController --> TourPackagesPage : Display package details
    deactivate TourPackageController

    TourPackagesPage --> Admin : Package details displayed
end

@enduml
