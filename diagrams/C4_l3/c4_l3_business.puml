@startuml
!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4_Component.puml

AddElementTag("storage", $shape = CylinderShape(), $bgColor="lightSkyBlue", $fontColor="white")

!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!include DEVICONS/mongodb.puml
!include DEVICONS/react.puml
!include DEVICONS/java.puml
!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5
!include FONTAWESOME/amazon.puml
!include FONTAWESOME/stripe.puml
!include FONTAWESOME/google.puml

LAYOUT_LEFT_RIGHT()

title Component Diagram for API Application Container - Dar El Salam Travel

Person(customer, "Customer", "Customer of the travel agency")
Person(employee, "Employee", "Employee of the travel agency")
Person(admin, "Admin", "Admin of the travel agency")

Container_Boundary(api_app, "API Application") {
    Container_Boundary(controllers, "Controllers") {
        Component(EventController, "Event Controller", "Spring REST Controller", "Handles HTTP requests related to events", $sprite="java")
        Component(CityController, "City Controller", "Spring REST Controller", "Handles HTTP requests related to cities", $sprite="java")
        Component(CountryController, "Country Controller", "Spring REST Controller", "Handles HTTP requests related to countries", $sprite="java")
        Component(AirportController, "Airport Controller", "Spring REST Controller", "Handles HTTP requests related to airports", $sprite="java")
        Component(HotelController, "Hotel Controller", "Spring REST Controller", "Handles HTTP requests related to hotels", $sprite="java")
        Component(UserController, "User Controller", "Spring REST Controller", "Handles HTTP requests related to users", $sprite="java")
        Component(BookingController, "Booking Controller", "Spring REST Controller", "Handles HTTP requests related to bookings", $sprite="java")
        Component(TourPackageController, "Package Controller", "Spring REST Controller", "Handles HTTP requests related to packages", $sprite="java")
        Component(AirportController, "Airport Controller", "Spring REST Controller", "Handles HTTP requests related to airports", $sprite="java")
        Component(HotelController, "Hotel Controller", "Spring REST Controller", "Handles HTTP requests related to hotels", $sprite="java")
        Component(TourEventController, "Tour Event Controller", "Spring REST Controller", "Handles HTTP requests related to tour events", $sprite="java")
        Component(BookingController, "Booking Controller", "Spring REST Controller", "Handles HTTP requests related to bookings", $sprite="java")
        Component(PaymentController, "Payment Controller", "Spring REST Controller", "Handles HTTP requests related to payments", $sprite="java")
        Component(NotificationController, "Notification Controller", "Spring REST Controller", "Handles HTTP requests related to notifications", $sprite="java")
        Component(TourController, "Tour Controller", "Spring REST Controller", "Handles HTTP requests related to tours", $sprite="java")
        Component(CustomerController, "Customer Controller", "Spring REST Controller", "Handles HTTP requests related to customers", $sprite="java")
        Component(ReservationController, "Reservation Controller", "Spring REST Controller", "Handles HTTP requests related to reservations", $sprite="java")
        Component(StaffController, "Staff Controller", "Spring REST Controller", "Handles HTTP requests related to staff", $sprite="java")
        Component(AuthenticationController, "Authentication Controller", "Spring REST Controller", "Handles HTTP requests related to authentication", $sprite="java")

    Component(ReviewController, "Review Controller", "Spring REST Controller", "Handles HTTP requests related to reviews", $sprite="java")
    Component(TravelerController, "Traveler Controller", "Spring REST Controller", "Handles HTTP requests related to travelers", $sprite="java")


    }

    Container_Boundary(services, "Services") {
        Component(EventService, "Event Service", "Spring Service", "Contains business logic for event-related operations", $sprite="java")
        Component(CityService, "City Service", "Spring Service", "Contains business logic for city-related operations", $sprite="java")
        Component(CountryService, "Country Service", "Spring Service", "Contains business logic for country-related operations", $sprite="java")
        Component(AirportService, "Airport Service", "Spring Service", "Contains business logic for airport-related operations", $sprite="java")
        Component(HotelService, "Hotel Service", "Spring Service", "Contains business logic for hotel-related operations", $sprite="java")
        Component(UserService, "User Service", "Spring Service", "Contains business logic for user-related operations", $sprite="java")
        Component(TourEventService, "Tour Event Service", "Spring Service", "Contains business logic for tour event-related operations", $sprite="java")
        Component(BookingService, "Booking Service", "Spring Service", "Contains business logic for booking-related operations", $sprite="java")
        Component(TourPackageService, "Package Service", "Spring Service", "Contains business logic for package-related operations", $sprite="java")
        Component(TourService, "Tour Service", "Spring Service", "Contains business logic for tour-related operations", $sprite="java")
        Component(PaymentService, "Payment Service", "Spring Service", "Contains business logic for payment-related operations", $sprite="java")
        Component(NotificationService, "Notification Service", "Spring Service", "Contains business logic for sending notifications", $sprite="java")
        Component(StaffService, "Staff Service", "Spring Service", "Contains business logic for staff management operations", $sprite="java")
        Component(AuthenticationService, "Authentication Service", "Spring Service", "Handles user authentication and authorization", $sprite="java")
        Component(ReservationService, "Reservation Service", "Spring Service", "Contains business logic for reservation-related operations", $sprite="java")
        Component(CustomerService, "Customer Service", "Spring Service", "Contains business logic for customer-related operations", $sprite="java")
        Component(TravelerService, "Traveler Service", "Spring Service", "Contains business logic for traveler-related operations", $sprite="java")
Component(ReviewService, "Review Service", "Spring Service", "Contains business logic for review-related operations", $sprite="java")

    }

    Container_Boundary(repositories, "Repositories") {
        Component(EventRepo, "Event Repository", "MongoDB Repository", "Handles persistence of event data", $sprite="java")
        Component(CityRepo, "City Repository", "MongoDB Repository", "Handles persistence of city data", $sprite="java")
        Component(CountryRepo, "Country Repository", "MongoDB Repository", "Handles persistence of country data", $sprite="java")
        Component(AirportRepo, "Airport Repository", "MongoDB Repository", "Handles persistence of airport data", $sprite="java")
        Component(HotelRepo, "Hotel Repository", "MongoDB Repository", "Handles persistence of hotel data", $sprite="java")
        Component(UserRepo, "User Repository", "MongoDB Repository", "Handles persistence of user data", $sprite="java")
        Component(TourEventRepo, "Tour Event Repository", "MongoDB Repository", "Handles persistence of tour event data", $sprite="java")
        Component(BookingRepo, "Booking Repository", "MongoDB Repository", "Handles persistence of booking data", $sprite="java")
        Component(TourPackageRepo, "Package Repository", "MongoDB Repository", "Handles persistence of package data", $sprite="java")
        Component(PaymentRepo, "Payment Repository", "MongoDB Repository", "Handles persistence of payment data", $sprite="java")
        Component(NotificationRepo, "Notification Repository", "MongoDB Repository", "Handles persistence of notification data", $sprite="java")
        Component(StaffRepo, "Staff Repository", "MongoDB Repository", "Handles persistence of staff data", $sprite="java")
        Component(AuthenticationRepo, "Authentication Repository", "MongoDB Repository", "Handles persistence of authentication data", $sprite="java")
        Component(ReservationRepo, "Reservation Repository", "MongoDB Repository", "Handles persistence of reservation data", $sprite="java")
        Component(CustomerRepo, "Customer Repository", "MongoDB Repository", "Handles persistence of customer data", $sprite="java")
        Component(TourRepo, "Tour Repository", "MongoDB Repository", "Handles persistence of tour data", $sprite="java")
        Component(TravelerRepo, "Traveler Repository", "MongoDB Repository", "Handles persistence of traveler data", $sprite="java")

   Component(ReviewRepo, "Review Repository", "MongoDB Repository", "Handles persistence of review data", $sprite="java")

   }

    Rel(CustomerController, CustomerService, "Receives HTTP requests and forwards to", "REST API")
    Rel(TourController, TourService, "Receives HTTP requests and forwards to", "REST API")
    Rel(ReservationController, ReservationService, "Receives HTTP requests and forwards to", "REST API")
    Rel(NotificationController, NotificationService, "Receives HTTP requests and forwards to", "REST API")
    Rel(PaymentController, PaymentService, "Receives HTTP requests and forwards to", "REST API")
    Rel(StaffController, StaffService, "Receives HTTP requests and forwards to", "REST API")
    Rel(AuthenticationController, AuthenticationService, "Receives HTTP requests and forwards to", "REST API")
    Rel(TravelerController, TravelerService, "Receives HTTP requests and forwards to", "REST API")

    Rel(EventController, EventService, "Receives HTTP requests and forwards to", "REST API")
    Rel(CityController, CityService, "Receives HTTP requests and forwards to", "REST API")
    Rel(CountryController, CountryService, "Receives HTTP requests and forwards to", "REST API")
    Rel(AirportController, AirportService, "Receives HTTP requests and forwards to", "REST API")
    Rel(HotelController, HotelService, "Receives HTTP requests and forwards to", "REST API")
    Rel(UserController, UserService, "Receives HTTP requests and forwards to", "REST API")
    Rel(TourEventController, TourEventService, "Receives HTTP requests and forwards to", "REST API")
    Rel(BookingController, BookingService, "Receives HTTP requests and forwards to", "REST API")
    Rel(TourPackageController, TourPackageService, "Receives HTTP requests and forwards to", "REST API")

    Rel(CustomerService, CustomerRepo, "Uses to read/write customer data", "MySQL Queries")
    Rel(TourService, TourRepo, "Uses to read/write tour data", "MySQL Queries")
    Rel(ReservationService, ReservationRepo, "Uses to read/write reservation data", "MySQL Queries")
    Rel(NotificationService, NotificationRepo, "Uses to store notification records", "MySQL Queries")
    Rel(PaymentService, PaymentRepo, "Uses to store payment records", "MySQL Queries")
    Rel(StaffService, StaffRepo, "Uses to read/write staff data", "MySQL Queries")
    Rel(AuthenticationService, AuthenticationRepo, "Uses to manage user data (credentials, roles)", "MySQL Queries")
    Rel(PaymentService, PaymentRepo, "Uses to store payment records", "MySQL Queries")
    Rel(NotificationService, NotificationRepo, "Uses to store notification records", "MySQL Queries")
    Rel(StaffService, StaffRepo, "Uses to read/write staff data", "MySQL Queries")
    Rel(AuthenticationService, AuthenticationRepo, "Uses to manage user data (credentials, roles)", "MySQL Queries")
    Rel(ReservationService, ReservationRepo, "Uses to read/write reservation data", "MySQL Queries")
    Rel(CustomerService, CustomerRepo, "Uses to read/write customer data", "MySQL Queries")
    Rel(TourService, TourRepo, "Uses to read/write tour data", "MySQL Queries")
    Rel(EventService, EventRepo, "Uses to read/write event data", "MySQL Queries")
    Rel(CityService, CityRepo, "Uses to read/write city data", "MySQL Queries")
    Rel(CountryService, CountryRepo, "Uses to read/write country data", "MySQL Queries")
    Rel(AirportService, AirportRepo, "Uses to read/write airport data", "MySQL Queries")
    Rel(HotelService, HotelRepo, "Uses to read/write hotel data", "MySQL Queries")
    Rel(TourEventService, TourEventRepo, "Uses to read/write tour event data", "MySQL Queries")
    Rel(BookingService, BookingRepo, "Uses to read/write booking data", "MySQL Queries")
    Rel(TourPackageService, TourPackageRepo, "Uses to read/write package data", "MySQL Queries")
    Rel(TravelerService, TravelerRepo, "Uses to read/write traveler data", "MongoDB Queries")



    Rel(ReservationService, CustomerService, "Fetches customer data for reservation creation", "HTTP API")
    Rel(ReservationService, TourService, "Fetches tour data for reservation creation", "HTTP API")
    Rel(TourService, ReservationService, "Checks reservation capacity for tours", "HTTP API")
    Rel(PaymentService, ReservationService, "Validates reservation for payment", "HTTP API")
    Rel(NotificationService, CustomerService, "Fetches customer contact details for sending notifications", "HTTP API")
    Rel(NotificationService, ReservationService, "Fetches reservation data for notification", "HTTP API")
    Rel(NotificationService, TourService, "Fetches tour data for sending notifications", "HTTP API")
    Rel(TravelerService, CountryService, "Fetches country data for traveler", "HTTP API")

    Rel(AuthenticationService, CustomerService, "Verifies customer ownership", "HTTP API")
    Rel(AuthenticationService, StaffService, "Verifies staff roles and permissions", "HTTP API")
    Rel(EventService, TourService, "Fetches associated tours for events", "HTTP API")
    Rel(EventService, NotificationService, "Notifies customers about event updates", "HTTP API")
    Rel(EventService, BookingService, "Validates bookings associated with events", "HTTP API")

    Rel(CityService, CountryService, "Fetches country data for a city", "HTTP API")
    Rel(AirportService, CityService, "Fetches city data for an airport", "HTTP API")
    Rel(HotelService, CityService, "Fetches city data for hotel locations", "HTTP API")

    Rel(TourEventService, EventService, "Fetches event details for a tour event", "HTTP API")
    Rel(TourEventService, TourService, "Fetches tour details for a tour event", "HTTP API")

    Rel(BookingService, CustomerService, "Fetches customer data for a booking", "HTTP API")
    Rel(BookingService, TourService, "Fetches tour details for a booking", "HTTP API")
    Rel(BookingService, HotelService, "Fetches hotel details for a booking", "HTTP API")
    Rel(BookingService, NotificationService, "Notifies customers about booking status", "HTTP API")

    Rel(TourPackageService, TourService, "Fetches tour data for a package", "HTTP API")
    Rel(TourPackageService, HotelService, "Fetches hotel data for a package", "HTTP API")
    Rel(TourPackageService, AirportService, "Fetches airport data for a package", "HTTP API")
    Rel(TourPackageService, BookingService, "Validates bookings for a package", "HTTP API")
Rel(ReviewController, ReviewService, "Receives HTTP requests and forwards to", "REST API")
Rel(TravelerController, TravelerService, "Receives HTTP requests and forwards to", "REST API")
Rel(ReviewService, ReviewRepo, "Uses to read/write review data", "MongoDB Queries")
Rel(TravelerService, TravelerRepo, "Uses to read/write traveler data", "MongoDB Queries")


}

Container(mysql, "MySQL", "Database", "Stores all travel agency data", $tags = "storage", $sprite="mysql")

Rel(CustomerRepo, mongoDB, "Reads/Writes customer data to", "MongoDB Queries")
Rel(TourRepo, mongoDB, "Reads/Writes tour data to", "MongoDB Queries")
Rel(ReservationRepo, mongoDB, "Reads/Writes reservation data to", "MongoDB Queries")
Rel(NotificationRepo, mongoDB, "Reads/Writes notification data to", "MongoDB Queries")
Rel(PaymentRepo, mongoDB, "Reads/Writes payment data to", "MongoDB Queries")
Rel(StaffRepo, mongoDB, "Reads/Writes staff data to", "MongoDB Queries")
Rel(AuthenticationRepo, mongoDB, "Reads/Writes user authentication data to", "MongoDB Queries")
Rel(TravelerRepo, mongoDB, "Reads/Writes traveler data to", "MongoDB Queries")


Container(spa, "Single-Page Application", "TypeScript, React", "Main interface for interacting with the Dar El Salam system", $sprite="react")
Container(web_app, "Web Application", "TypeScript, React", "Delivers static content and main interface", $sprite="react")

Rel(web_app, CustomerController, "Makes HTTP requests for customer operations", "HTTPS/JSON")
Rel(web_app, TourController, "Makes HTTP requests for tour operations", "HTTPS/JSON")
Rel(web_app, ReservationController, "Makes HTTP requests for reservation operations", "HTTPS/JSON")
Rel(web_app, NotificationController, "Makes HTTP requests for notification operations", "HTTPS/JSON")
Rel(web_app, PaymentController, "Makes HTTP requests for payment operations", "HTTPS/JSON")
Rel(web_app, StaffController, "Makes HTTP requests for staff management", "HTTPS/JSON")
Rel(web_app, AuthenticationController, "Handles HTTP requests for login, registration", "HTTPS/JSON")

Rel(web_app, EventController, "Makes HTTP requests for event operations", "HTTPS/JSON")
Rel(web_app, CityController, "Makes HTTP requests for city operations", "HTTPS/JSON")
Rel(web_app, CountryController, "Makes HTTP requests for country operations", "HTTPS/JSON")
Rel(web_app, AirportController, "Makes HTTP requests for airport operations", "HTTPS/JSON")
Rel(web_app, HotelController, "Makes HTTP requests for hotel operations", "HTTPS/JSON")
Rel(web_app, UserController, "Makes HTTP requests for user operations", "HTTPS/JSON")
Rel(web_app, TourEventController, "Makes HTTP requests for tour event operations", "HTTPS/JSON")
Rel(web_app, BookingController, "Makes HTTP requests for booking operations", "HTTPS/JSON")
Rel(web_app, TourPackageController, "Makes HTTP requests for package operations", "HTTPS/JSON")
Rel(web_app, TravelerController, "Makes HTTP requests for traveler operations", "HTTPS/JSON")
Rel(web_app, ReviewController, "Makes HTTP requests for review operations", "HTTPS/JSON")

System_Ext(Stripe, "Stripe", "External service for processing payments", $sprite="stripe")
System_Ext(GmailApi, "Gmail API", "Sends emails to customers", $sprite="google")
System_Ext(Auth0, "Auth0", "External authentication service for handling user login and security", $sprite="google")

Rel(PaymentService, Stripe, "Processes payments using", "HTTPS API")
Rel(NotificationService, GmailApi, "Sends notification emails via", "HTTPS API")

Rel(AuthenticationController, Auth0, "Delegates authentication and authorization to", "OAuth 2.0/JWT")
Rel(AuthenticationService, Auth0, "Verifies tokens and user credentials with", "OAuth 2.0/JWT")

Rel(customer, spa, "Interacts with", "Web Browser")
Rel(employee, spa, "Interacts with", "Web Browser")
Rel(admin, spa, "Interacts with", "Web Browser")

Rel(spa, web_app, "Routes requests to", "HTTPS")

Rel(ReviewRepo, mongoDB, "Reads/Writes review data to", "MongoDB Queries")
Rel(TravelerRepo, mongoDB, "Reads/Writes traveler data to", "MongoDB Queries")

@enduml
