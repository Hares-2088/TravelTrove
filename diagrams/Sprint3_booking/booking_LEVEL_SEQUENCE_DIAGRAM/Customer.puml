@startuml
title Booking a Tour Package Sequence Diagram

actor Customer
participant ReactApplication
participant TourPackagePage
participant BookingController
participant BookingService
participant PackageService
participant UserService
participant TravelerService
participant BookingRepository
participant Database
participant BookingResponseModel

Customer -> ReactApplication : Access Tour Package Page
activate ReactApplication

ReactApplication -> TourPackagePage : render()
activate TourPackagePage
deactivate ReactApplication

TourPackagePage --> Customer : Display tour package details

== Start Booking Process ==
Customer -> TourPackagePage : Click "Book Now"
TourPackagePage -> BookingController : POST /api/v1/bookings
activate BookingController

BookingController -> BookingService : createBooking(bookingRequestModel)
activate BookingService

== Validate User and Package ==
BookingService -> UserService : validateUserExists(userId)
activate UserService
UserService -> Database : SELECT * FROM users WHERE userId = userId
Database --> UserService : User found
deactivate UserService

BookingService -> PackageService : validatePackageExists(packageId)
activate PackageService
PackageService -> Database : SELECT * FROM tour_packages WHERE packageId = packageId
Database --> PackageService : Package found
deactivate PackageService

BookingService -> BookingRepository : checkExistingBooking(userId, packageId)
activate BookingRepository
BookingRepository -> Database : SELECT * FROM bookings WHERE userId = userId AND packageId = packageId
Database --> BookingRepository : No existing booking found
deactivate BookingRepository

== Validate Travelers ==
BookingService -> TravelerService : checkExistingTravelers(userId)
activate TravelerService
TravelerService -> Database : SELECT * FROM travelers WHERE userId = userId
Database --> TravelerService : List of existing travelers
deactivate TravelerService

BookingService -> TravelerService : createNewTravelersIfNeeded()
activate TravelerService
TravelerService -> Database : INSERT INTO travelers (new travelers)
Database --> TravelerService : New travelers created
deactivate TravelerService

== Update User Traveler List ==
BookingService -> UserService : updateUserTravelerIds(userId, travelerIds)
activate UserService
UserService -> Database : UPDATE users SET travelerIds = travelerIds WHERE userId = userId
Database --> UserService : Traveler list updated
deactivate UserService

== Save Booking ==
BookingService -> BookingRepository : save(booking)
activate BookingRepository
BookingRepository -> Database : INSERT INTO bookings (userId, packageId, totalPrice, status, bookingDate, travelerIds)
Database --> BookingRepository : Booking saved
deactivate BookingRepository

BookingService -> BookingResponseModel : Convert booking entity to response
activate BookingResponseModel
BookingResponseModel --> BookingService : Response model ready
deactivate BookingResponseModel

BookingService --> BookingController : Booking created
deactivate BookingService

BookingController --> TourPackagePage : Response with booking confirmation
deactivate BookingController

TourPackagePage --> Customer : Show booking confirmation (e.g., Booking ID, Payment Required)

@enduml
